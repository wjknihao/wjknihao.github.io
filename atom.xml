<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wjknihao</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wjknihao.github.io/"/>
  <updated>2018-06-06T13:50:12.823Z</updated>
  <id>http://wjknihao.github.io/</id>
  
  <author>
    <name>wjk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql复杂查询andJavaScript基础</title>
    <link href="http://wjknihao.github.io/2018/06/06/%E7%AC%AC%E5%85%AB%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://wjknihao.github.io/2018/06/06/第八篇文章/</id>
    <published>2018-06-06T13:48:27.000Z</published>
    <updated>2018-06-06T13:50:12.823Z</updated>
    
    <content type="html"><![CDATA[<p>复习：<br>列约束<br>外键约束  foreign key(deptId) references dept(did)<br>检查约束 check<br>简单查询<br> 查询特定的列  select dname,sex from emp;<br> 查询全部      select<em>from emp;<br> 给列取别  select eid as 编号,ename as 姓名 from emp;<br> 显示不同记录  select distinct(sex) from emp;<br> 查询计算  select salary</em>12+5000 from emp;<br> 查询排序  select <em> from emp order by salary asc/desc;<br>      数值/日期/字符编码<br> 条件查询  select salary from emp where ename=’tom’<br>      select </em> from emp where deptId=10;<br>      select<em>from emp where salary&gt;=3000 and salary&lt;=6000;<br>      select </em> from emp where salary between 3000 and 6000;<br>     select<em>from emp where salary<3000 or="" salary="">10000;<br>     select</3000></em>from emp where eid=1 or eid=2;<br>     select<em>from emp where eid in(1,2,3….)<br>     /not in()<br>     select</em>from emp where deptId is not null;<br>模糊查询  like  %  _<br>    select<em>from emp where ename like ‘%e_’<br>    % 任意多个字符 &gt;=0<br>    _ 只有一个字符<br>分页查询<br>   limit start,count;<br>   limit (n-1)</em>5 , 5<br>select*from emp where sex=1 order by birthday asc limit 0,5;</p><p>今日目标：<br>(1)复杂查询 —— 比较抽象&amp;尽力掌握</p><p>1.复杂查询 —— 聚合/分组查询<br>聚合函数：<br>count( ) 计算数量<br>sum( )  计算总量<br>max()   计算最大<br>min()   计算最小<br>avg()    计算平均<br>GROUP BY   分组查询<br>示例：查询出所有员工的总数量<br>SELECT COUNT(<em>) FROM emp;  #15<br>SELECT COUNT(eid) FROM emp;  #15<br>SELECT COUNT(deptId) FROM emp; #14<br>练习：查询出所有员工的工资总和<br>SELECT SUM(salary) FROM emp;<br>练习：查询出10号部门员工的平均工资<br>SELECT SUM(salary)/COUNT(eid) FROM emp WHERE deptId=10;<br>SELECT AVG(salary) AS 平均工资 FROM emp WHERE deptId=10;<br>练习：查询出年龄最大和最小的员工的生日<br>SELECT MAX(birthday),MIN(birthday) FROM emp;<br>示例：查询出每个部门的编号以及该部门的员工数量(先分组再聚合计算)<br>SELECT deptId,COUNT(</em>) FROM emp GROUP BY deptId;<br>注意：在分组查询的SELECT后面只能接‘分组条件列’、或者其它列的聚合函数；<br>不能直接写其它的列<br>练习：查询出每个部门编号、该部门工资最大值、最小值、平均值<br>SELECT deptId,MAX(salary),MIN(salary),AVG(salary) FROM emp GROUP BY deptId;<br>练习：查询出男员工和女员工的数量<br>SELECT sex,COUNT(*) FROM emp GROUP BY sex;</p><p>2.复杂查询  —— 子查询<br>  子查询：在一条语句(增删改查)中又嵌入了一条SELECT语句<br>  示例：查询出“研发部”所有员工的信息<br>  步骤1: 查询研发部的部门编号-10；<br>  SELECT did FROM dept WHERE dname=’研发部’;<br>  步骤2: 根据研发部的部门编号再查询员工<br>  SELECT <em> FROM emp WHERE deptId=10;<br>  综合上述语句: 第一行的查询结果是第二行的查询条件<br>   SELECT </em> FROM emp WHERE deptId=(<br>     SELECT did FROM dept WHERE dname=’研发部’<br>);<br>  练习：查询出工资比TOM高的员工的所有信息<br>    步骤1:查询tom的工资=&gt;6000<br>    SELECT salary FROM emp WHERE ename=’tom’;<br>    步骤2:查询工资高于6000的员工<br>    SELECT <em> FROM emp WHERE salary&gt;6000;<br>    综合：<br>    SELECT </em> FROM emp WHERE salary&gt;(<br>      SELECT salary FROM emp WHERE ename=’tom’<br>);</p><p>  练习：查询出于lucy在同一个部门的员工信息<br>    步骤1:查询lucy所在的部门编号-&gt;20<br>    SELECT deptId FROM emp WHERE ename=’lucy’;<br>    步骤2:查询20号部门的所有员工<br>    SELECT <em> FROM emp WHERE deptId=20;<br>    综合:<br>    SELECT </em> FROM emp WHERE deptId=(<br>     SELECT deptId FROM emp WHERE ename=’lucy’<br>);<br>  练习：查询与TOM在同一年出生的员工所有信息<br>    步骤1: 查询tom的生日年份-1990<br>    SELECT YEAR(birthday) FROM emp WHERE ename=’tom’;<br>    YEAR获取年份信息<br>    步骤2: 查询员工中，生日年份为1990<br>    SELECT <em> FROM emp WHERE YEAR(birthday)=1990;<br>    综合：<br>    SELECT </em> FROM emp WHERE YEAR(birthday)=(<br>       SELECT YEAR(birthday) FROM emp WHERE ename=’tom’<br>);</p><p>3.复杂查询 —— 跨表/多表查询<br>  示例：查询出每个员工的姓名及其所在部门的名称<br>    SELECT ename,dname FROM emp,dept; #错误<br>   产生的结果 是一个 ‘笛卡尔积’<br>    SELECT ename,dname FROM emp,dept WHERE deptId=did;<br>上述语法是SQL-92中多表查询，有天然缺陷，无法查询没有部门的员工。<br>在SQL-99中提出新的跨表查询语法 —— 四组<br>    (1)内连接查询 - 等同于SQL-92多表查询<br>    SELECT ename,dname FROM emp     INNER JOIN dept ON deptId=did;<br>      (2)左外连接查询<br>    SELECT ename,dname FROM emp LEFT OUTER JOIN     dept ON deptId=did;<br>     左侧表中所有的记录，即使右侧没有对应记录也会显示出来。<br>      (3)右外连接查询<br>    SELECT ename,dname FROM emp RIGHT JOIN dept ON deptId=did;<br>     右侧表中所有的记录，即使左侧没有对应记录也会显示出来。<br>     注意：在左(右)外连接中，OUTER关键字可以省略。<br>      (4)全连接查询 - FULL JOIN 显示左侧和右侧所有的记录——MySQL不支持</p><p>  (5)全连接解决方案<br>  UNION(合同相同项)/UNION ALL(不合并相同项)<br>  (SELECT ename FROM emp_cn)<br>  UNION<br>  (SELECT ename FROM emp_us)</p><p>  (SELECT ename FROM emp_cn)<br>  UNION ALL<br>  (SELECT ename FROM emp_us)</p><p>  合并左外连接 和 右外连接<br>  (SELECT ename,dname FROM emp LEFT OUTER JOIN dept ON deptId=did)<br>  UNION<br>  (SELECT ename,dname FROM emp RIGHT OUTER JOIN dept ON deptId=did);</p><p>学习一门语言线路图<br>  (1)了解背景知识：历史、现状、特点、应用领域、发展趋势<br>  (2)搭建开发环境，编写HelloWorld<br>  (3)声明变量和常量<br>  (4)数据类型<br>  (5)运算符<br>  (6)逻辑结构<br>  (7)通用小程序<br>  (8)函数和对象<br>  (9)第三方库、组件、框架<br>  (10)实用项目</p><h1 id="1-了解JS"><a href="#1-了解JS" class="headerlink" title="1. 了解JS"></a>1. 了解JS</h1><p>  1992年，nombas公司在软件中嵌入了一个脚本<br>  1995年，netscape在浏览器navigator2.0加入JavaScript<br>  1996年，微软克隆版JavaScript，叫做JScript。<br>  1997年，ECMA组织制定了标准ECMA-263，各大浏览器厂商遵守这个标准<br>  2009年，commenJS规范提出，js开始向着服务端发展。</p><h1 id="2-js的开发环境"><a href="#2-js的开发环境" class="headerlink" title="2. js的开发环境"></a>2. js的开发环境</h1><p> js都可以在哪些地方运行？<br>  (1) 浏览器内置的JavaScript解释器<br>  (2) 使用nodeJS提供的JavaScript解释器<br>      下载安装nodejs<br>      <a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>      使用步骤：<br>         开始 -&gt; 单击右键 -&gt;运行 -&gt; 输入cmd<br>      退出node    ctrl+c 两次  或者  .exit<br> js语法规范<br>  ① 区分大小写。<br>  ② 一行结束后，分号( ; )可加可不加，建议都加分号。<br>  ③ 单行注释  //   多行注释  /<em> 注释内容 </em>/</p><h1 id="3-变量"><a href="#3-变量" class="headerlink" title="3.变量"></a>3.变量</h1><p> 变量是用于存储信息的容器，所存储的信息是可变的。<br> (1)创建(定义、声明)变量<br>   var x;<br>   var是创建变量使用的关键字， x就是变量的名称，可以自定义。<br>   创建变量，不给变量赋值，默认是undefined-&gt;未定义;<br>   x = 1;  =表示赋值<br>  练习：(2.js)<br>    创建一个变量 num, 第一次赋值是10，第二次赋值是20，第三次赋值是50； 打印出最后num的结果<br> (2)变量的命名规则<br>   变量开头以 字母、$、<em>开头<br>   变量中可以出现 字母、数字、</em> 、$<br>   变量名称不能使用关键字和保留字<br>    保留字：class、int、float<br>    关键字：</p><p>   建议：在创建变量的时候，通常变量要有语义，例如定义人的姓名 name,定义用户名 userName(驼峰命名法),或者user_name(匈牙利命名法)。</p><h1 id="4-常量"><a href="#4-常量" class="headerlink" title="4.常量"></a>4.常量</h1><p>  常量表示固定不变的值；<br>    创建   const PI = 3.14;<br>    习惯上，常量用大写的英文形式。<br>  练习：<br>    创建中国的国土面积，创建一个足球队人数。</p><p>  课后练习：<br>     计算一个半径为5的圆 的周长和面积；<br>     要求：半径值放入到变量中；PI放入到常量中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;复习：&lt;br&gt;列约束&lt;br&gt;外键约束  foreign key(deptId) references dept(did)&lt;br&gt;检查约束 check&lt;br&gt;简单查询&lt;br&gt; 查询特定的列  select dname,sex from emp;&lt;br&gt; 查询全部      s
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://wjknihao.github.io/tags/mysql/"/>
    
      <category term="javaScript" scheme="http://wjknihao.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL数据库</title>
    <link href="http://wjknihao.github.io/2018/06/06/%E7%AC%AC%E4%B8%83%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://wjknihao.github.io/2018/06/06/第七篇文章/</id>
    <published>2018-06-06T13:43:29.000Z</published>
    <updated>2018-06-06T13:46:45.069Z</updated>
    
    <content type="html"><![CDATA[<p>复习：<br>更改数据<br>UPDATE 表名称 SET ename=’tom’,age=20 WHERE id=10<br>删除数据<br>DELETE FROM 表名称 WHERE id=20;<br>解决中文乱码问题<br>.sql文件  设置文件存储的编码为 utf8；文件另存为 utf8<br>客户端  sql文件开头  SET NAMES UTF8;<br>服务器端  在创建数据库的时候<br>CREATE DATABASE jd CHARSET=UTF8;<br>列类型(数据类型)<br>  数值型<br>    整型: TINYINT/SMALLINT/INT/BIGINT<br>    浮点型: FLOAT(M,N) 4个 1234567  1. 234567*10^6<br>           DOUBLE(M,N) 8个字节<br>           DECIMAL(9,2)<br>    BOOL  TRUE/FALSE  1/0<br>  日期  DATE/TIME/DATETIME<br>  字符  VARCHAR/CHAR最多长度为255/TEXT</p><h1 id="列约束"><a href="#列约束" class="headerlink" title="列约束"></a>列约束</h1><p>  主键约束  只能使用在整型数据，从小到大排序，不能为空NULL，不能重复;  PRIMARY KEY<br>  非空约束: 列不能为空，可以插入重复的数据  NOT NULL<br>  唯一约束: UNIQUE 不能插入重复的数据，可出现重复NULL<br>  默认约束: DEFAULT </p><h2 id="1-外键约束"><a href="#1-外键约束" class="headerlink" title="1.外键约束"></a>1.外键约束</h2><p>  当前表的中值，要在另一个表中存在; 但是允许使用NULL<br>  foreign key(列名称) references 表名称(列名称)</p><h2 id="2-检查约束"><a href="#2-检查约束" class="headerlink" title="2.检查约束"></a>2.检查约束</h2><p>  student( age tinyint check(age &gt;18 and age&gt;24) )<br>  mysql不支持检查约束。</p><h2 id="3-项目中如何存储日期时间数据"><a href="#3-项目中如何存储日期时间数据" class="headerlink" title="3.项目中如何存储日期时间数据"></a>3.项目中如何存储日期时间数据</h2><p> 2018-06-05   2018/06/05    05/06/2018<br> 性别  男/女   F/M   BOY/GIRL<br> date<br>BOOL  1/0<br> internationalzation  i18n<br> 计算机元年  1970-1-1，通常记录一个时间，用某个时间与计算机元年之间的毫秒差<br>  1s = 1000ms  1m = 60s  1h=60m  1d=24h<br>  1y = 24<em>60</em>60<em>1000</em>365</p><p>1000    1970-1-1 0:0:1<br>1000<em>60    1970-1-1 0:1:0<br>1000</em>60<em>60    1970-1-1 1:0:0<br>1000</em>60<em>60</em>24    1970-1-2 0:0:0<br> 开发中存储时间使用 BIGINT<br> 存储性别使用 BOOL<br>2.MySQL中使用自增列<br> AUTO_INCREMENT 自动增长，如果声明一个列为自增列，无需手动赋值，只需要指定为NULL，就会自动在当前数据中最大的值的基础上 +1 插入。<br> 注意：用于整型 PRIMARY KEY 的列，允许手动赋值。</p><p>练习：编写jd.sql文件，创建数据库jd，包含如下两个表：<br>  部门表 dept ( did, dname )<br>     10  研发部<br>     20  市场部<br>     30  运营部<br>     40  综合管理部<br>  员工表emp (eid ename  sex  birthday  salary deptId )<br>     插入5~14条记录</p><h1 id="查询：简单查询和复杂查询"><a href="#查询：简单查询和复杂查询" class="headerlink" title="查询：简单查询和复杂查询"></a>查询：简单查询和复杂查询</h1><h2 id="1-简单查询-——-只查询特定的列"><a href="#1-简单查询-——-只查询特定的列" class="headerlink" title="1.简单查询 —— 只查询特定的列"></a>1.简单查询 —— 只查询特定的列</h2><p>  select eid,ename,salary from emp;</p><h2 id="2-简单查询-——-查询所有的列"><a href="#2-简单查询-——-查询所有的列" class="headerlink" title="2.简单查询 —— 查询所有的列"></a>2.简单查询 —— 查询所有的列</h2><p>  select * from emp;  </p><h2 id="3-简单查询-——-给列取别名"><a href="#3-简单查询-——-给列取别名" class="headerlink" title="3.简单查询 —— 给列取别名"></a>3.简单查询 —— 给列取别名</h2><p>  select eid as 编号,ename as 姓名 from emp;<br>  练习：给eid-&gt;e, ename-&gt;n, sex-&gt;s<br>  SELECT eid AS e,ename AS n,sex AS s from emp;<br>  练习：给所有的列起中文别名<br>  SELECT eid AS 编号, ename AS 姓名,sex AS 性别,birthday AS 生日,salary AS 工资,deptId AS 部门 from emp;</p><h2 id="4-简单查询-——-只显示不同的记录-合并相同的记录"><a href="#4-简单查询-——-只显示不同的记录-合并相同的记录" class="headerlink" title="4.简单查询 —— 只显示不同的记录/合并相同的记录"></a>4.简单查询 —— 只显示不同的记录/合并相同的记录</h2><p>  示例：查询员工都在哪些部门;<br>  SELECT DISTINCT(deptId) FROM emp;<br>  函数、方法<br>  练习：查询都有哪些性别?<br>  SELECT DISTINCT(sex) FROM emp;</p><h2 id="5-简单查询-——-在查询时执行计算"><a href="#5-简单查询-——-在查询时执行计算" class="headerlink" title="5.简单查询 —— 在查询时执行计算"></a>5.简单查询 —— 在查询时执行计算</h2><p>  示例：计算2<em>3/5<br>  SELECT 2</em>3/5;<br>  示例：查询员工的姓名及年薪<br>  SELECT ename,salary<em>12 AS 年薪 from emp;<br>  练习：假设给每一个员工的工资加500，年终奖为2000，查询员工的一年收入是多少？<br>  SELECT ename AS 姓名,(salary+500)</em>12+2000 AS 收入 FROM emp;</p><h2 id="6-简单查询-——-查询结果集的排序"><a href="#6-简单查询-——-查询结果集的排序" class="headerlink" title="6.简单查询 —— 查询结果集的排序"></a>6.简单查询 —— 查询结果集的排序</h2><p>  示例：查询所有的员工，按照工资升序排列<br>  SELECT <em> FROM emp ORDER BY salary ASC;<br>  示例：查询所有的员工，按照工资降序排列<br>  SELECT </em> FROM emp ORDER BY salary DESC;<br>  练习：查询所有的员工，按照年龄从大到小排序<br>  SELECT <em> FROM emp ORDER BY birthday ASC;<br>  练习：查询所有的员工，按照年龄从小到大排序<br>  SELECT</em>FROM emp ORDER BY birthday DESC;<br>  练习：查询所有员工，按照姓名降序排序<br>  SELECT <em> FROM emp ORDER BY ename DESC;<br>  练习：查询所有员工，按照生日降序，如果生日相同，按照姓名降序排列<br>  SELECT </em> FROM emp ORDER BY birthday DESC,ename DESC;<br>  练习：查询所有员工，按照性别排序，如果性别相同，按照收入排序<br>  SELECT * FROM emp ORDER BY sex ASC,salary ASC;</p><p>ORDER BY可以按照 数值、字符编码、日期进行排序</p><h2 id="7-简单查询-——-条件查询"><a href="#7-简单查询-——-条件查询" class="headerlink" title="7.简单查询 —— 条件查询"></a>7.简单查询 —— 条件查询</h2><p>  示例：查询出编号为5的员工所有信息<br>    SELECT * FROM emp WHERE eid=5; </p><p>比较运算符 =  !=  &gt;  &lt;  &gt;=  &lt;= </p><p>练习：查询出姓名为KING员工的编号、姓名、工资、生日<br>  SELECT eid,ename,salary,birthday FROM emp WHERE ename=’king’;<br>  练习：查询出20号部门下所有员工的信息<br>  SELECT <em> FROM emp WHERE deptId=20;<br>  练习：查询出所有的男员工信息<br>  SELECT </em> FROM emp WHERE sex=1;<br>  示例：查询出工资大于等于5000的员工所有信息<br>  SELECT <em> FROM emp WHERE salary&gt;=5000;<br>  练习：查询出1991-1-1之后出生的员工所有信息<br>  SELECT </em> FROM emp WHERE birthday&gt;’1991-1-1’;<br>  练习：查询出不在10号部门的所有员工信息<br>  SELECT <em> FROM emp WHERE deptId!=10;<br>练习：查询出暂时没有部门的员工信息<br>SELECT </em> FROM emp WHERE deptId IS NULL;<br>deptId=NULL 错误<br>  练习：查询出有明确部门的员工信息<br>  SELECT <em> FROM emp WHERE deptId IS NOT NULL;<br>  练习：查询出工资大于6000的女员工所有信息<br>  SELECT </em> FROM emp WHERE salary&gt;6000 AND sex=0;<br>  练习：查询出工资在5000~8000之间的员工信息<br>  SELECT <em> FROM emp WHERE salary&gt;=5000 AND salary&lt;=8000;<br>  SELECT </em> FROM emp WHERE salary BETWEEN 5000 AND 8000;<br>  练习：查询出工资小于4000或者大于8000的员工信息<br>  SELECT <em> FROM emp WHERE salary<4000 or="" salary="">8000;<br>  练习：查询出在1991年出生的员工信息<br>  SELECT </4000></em> FROM emp WHERE birthday&gt;=’1991-1-1’ AND birthday&lt;=’1991-12-31’;<br>  SELECT <em> FROM emp WHERE birthday BETWEEN ‘1991-1-1’ AND ‘1991-12-31’;<br>  练习：查询出在1990年之前或1993之后出生的员工信息<br>  SELECT </em> FROM emp WHERE birthday&lt;’1990-1-1’ OR birthday&gt;’1993-12-31’;<br>  练习：查询出在10和30号部门的员工信息<br>  SELECT <em> FROM emp WHERE deptId=10 OR deptId=30;<br>  SELECT </em> FROM emp WHERE deptId IN (10,30);<br>练习：查询出在10、30、50、80号部门的员工信息<br>  SELECT <em> FROM emp WHERE deptId=10 OR deptId=30 OR deptId=50 OR deptId=80;<br>  SELECT </em> FROM emp WHERE deptId IN (10,30,50,80);<br>  练习：查询出不在10和30号部门的员工信息<br>  SELECT * FROM emp WHERE deptId NOT IN(10,30);</p><p>8.简单查询 —— 模糊条件查询<br>  示例：查询出姓名中包含字母E的员工所有信息<br>  SELECT <em> FROM emp WHERE ename LIKE ‘%e%’;<br>    练习：查询出姓名以E结尾的员工所有信息<br>  SELECT </em> FROM emp WHERE ename LIKE ‘%e’;<br>  练习：查询出姓名中倒数第二个字符是E的员工所有信息<br>  SELECT * FROM emp WHERE ename LIKE ‘%e_’;</p><p>%  任意多个字符 &gt;= 0<br> _  任意一个字符 = 1<br>注意：以上两个符号不能和=连用，只能和LIKE连用。</p><p>9.简单查询 —— 分页查询<br>  SELECT <em> FROM emp<br>WHERE…<br>ORDER BY …<br>LIMIT start,count…<br>  查询所有的男员工，按照工资升序排列。<br>  SELECT </em> FROM emp WHERE sex=1 ORDER BY salary ASC;<br>  查询出有43条记录，每页显示5条记录，一共有9页<br>  得出原理： 从哪开始，往后取的数量</p><p>页码    开始    数量<br>第1页    0    5<br>第2页    5    5<br>第3页    10    5<br>第4页    15    5<br>第5页    20    5<br>LIMIT start, count<br>start  开始的值<br>count 查询的数量<br>查询第1页员工数据<br>SELECT <em> FROM emp LIMIT 0, 5;<br>查询第2页员工数据<br>SELECT </em> FROM emp LIMIT 5, 5;<br>查询第3页员工数据<br>SELECT <em> FROM emp LIMIT 10, 5;<br>查询第4页员工数据<br>SELECT </em> FROM emp LIMIT 15, 5;<br>查询第5页员工数据<br>SELECT <em> FROM emp LIMIT 20, 5;<br>….<br>查询第n页员工数据<br>SELECT </em> FROM emp LIMIT (n-1)*5, 5;</p><p>练习：查询所有员工的分页信息，假设每页显示7条记录；分别查询前4页<br>SELECT <em> FROM emp LIMIT 0,7;<br>SELECT </em> FROM emp LIMIT 7,7;<br>SELECT <em> FROM emp LIMIT 14,7;<br>SELECT </em> FROM emp LIMIT 21,7;</p><p>SELECT <em> FROM emp LIMIT (n-1)</em>count, count;<br>n页码(1,2,3…)  count每页的数量</p><p>课后自学：<br>高阶面试题：MySQL中的存储引擎是什么？有哪些？<br>baike.baidu.com </p><p>课后练习：<br>(1)删除今天课堂笔记中的所有示例和练习中的代码，自己根据注释文字写出所有的SQL语句 —— 经典练习强化！<br>(2)根据“学子商城数据库结构”设计图及说明文档，编写.sql文件，写出创建库和表所需的所有语句。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;复习：&lt;br&gt;更改数据&lt;br&gt;UPDATE 表名称 SET ename=’tom’,age=20 WHERE id=10&lt;br&gt;删除数据&lt;br&gt;DELETE FROM 表名称 WHERE id=20;&lt;br&gt;解决中文乱码问题&lt;br&gt;.sql文件  设置文件存储的编码为 ut
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://wjknihao.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL数据库</title>
    <link href="http://wjknihao.github.io/2018/06/06/%E7%AC%AC%E5%85%AD%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://wjknihao.github.io/2018/06/06/第六篇文章/</id>
    <published>2018-06-06T13:42:02.000Z</published>
    <updated>2018-06-06T13:51:16.850Z</updated>
    
    <content type="html"><![CDATA[<p>复习<br>数据保存方式：内存、文件、Excel(Access)、数据库。<br>关系型数据库-MySQL<br>数据库服务器 mysqld.exe<br>客户端 mysql.exe<br>登录方式： mysql.exe  –h127.0.0.1  -P3306  -uroot -p<br>   mysql  -uroot<br>Server -&gt; Database –&gt; Table –&gt; Row -&gt;Column<br>查看数据库:  show databases;<br>进入某个数据库：use tedu;<br>查看所有的表: show tables;<br>创建表:<br>   Create table stu(<br>     sid int,<br>     name varchar(8),<br>     score int<br>);<br>查看列:  desc stu;<br>插入数据: insert into stu values(‘1’,’tom’,’90’);<br>查询数据: select * from stu;</p><h1 id="1-删除和更新数据"><a href="#1-删除和更新数据" class="headerlink" title="1.删除和更新数据"></a>1.删除和更新数据</h1><p>删除数据<br>delete from 表名称 where 限定条件(lid=‘10’);<br>更新数据<br>update 表名称 set 修改的列(title=’abc’) where 限定条件(lid=’20’)<br>练习：删除编号为30的商品，更新编号为50的商品的价格为 999.99</p><h1 id="2-解决数据中的中文乱码"><a href="#2-解决数据中的中文乱码" class="headerlink" title="2.解决数据中的中文乱码"></a>2.解决数据中的中文乱码</h1><p>  最早出现的编码 ASCII, 是对英文字符以及英文符号进行的编码，例如 h-&gt;78  e-&gt;108; 一共有128个。<br>  Mysql默认使用的编码latin-1；<br>  中国的编码形式<br>   GB2312  主要是对常用的中文进行了编码，大概有6000个字符编码；<br>   GBK 在GB2312上，加入了一些繁体中文，大概两万多个字符编码；<br>   Big5 只支持繁体中文的编码；<br>  国际标准编码<br>   对世界上常用的语言进行了编码，分为utf-8 utf-16 utf-32,兼容ASCII码<br>  解决中文乱码<br>①服务器端创建数据库为utf8<br>    create database tedu charset=utf8;<br>  ②客户端连接的时候为utf8<br>    在脚本的最前边  set  names  utf8;<br>  ③脚本(.sql)文件为utf8<br>    文件另存为 utf8</p><p>学习目标：<br> 列类型(数据类型)<br> 列约束</p><h1 id="3-列类型"><a href="#3-列类型" class="headerlink" title="3.列类型"></a>3.列类型</h1><p> (1)数值类型<br>   整型<br>    tinyint:  微整型 1个字节  存储范围 -128 ~ 127<br>    smallint: 小整型 2个字节 存储范围 -32768~32767<br>    int:      整型   4个字节 存储范围<br>-2147483648 ~ 2147483647<br>    bigint:   大整型 8个字节 非常大了<br>   浮点型<br>    float(m,n):    占4个字节, 表示的范围远比int要大<br>    double(m,n):  占8个字节，比bigint大的多<br>decimal(m,n):  m一共有多少位，n小数点后有多少位<br>bool:  只有两个类型 true/false,或者1/0 ，最终创建后，会被转成 tinyint(1),<br>注意：TRUE 和 FALSE不能加引号。<br> 日期:<br> date:     2018-06-04   年-月-日<br> time:     14:09         小时:分<br> datetime: 2018-06-04 14:09  年-月-日 时:分<br> 字符:<br> varchar(m)：  通过varchar可以指定长度,内容是可变长度，所存储的空间比较大，相比较于char速度慢一些；<br> char(m)： 无论有多少内容，只要没有达到m，就会用空格填满；相比较于varchar，执行速度更快一些；<br> text： 存储空间更大，最多能达到2G</p><h1 id="4-列约束"><a href="#4-列约束" class="headerlink" title="4.列约束"></a>4.列约束</h1><p>  在插入数据的时候，对所要插入的数据进行验证，例如：id不能出现重复的，姓名不能为空等等。<br>(1)主键约束 –  PRIMARY KEY<br>  声明为主键的列不能插入重复的值，也不能插入NULL。表中的记录会自动按照主键列上的值从小到大排序——加快查找速度。<br>  注意：一个表只能有一个主键<br> (2)非空约束 - NOT NULL<br>  在声明了非空约束的列上，不能插入NULL，但是允许插入重复的值。<br> (3)唯一约束 – UNIQUE<br>  在声明了唯一约束的列上，不能插入重复的值，但是可以插入NULL值，而且NULL可以插入多个；<br>  注意：NULL和任何值都不相等。<br> (4)默认约束 – DEFAULT<br>  在声明了默认约束后，如果使用default，就会自动使用default的值，也可以选择不给默认列插入数据<br>  INSERT INTO emp VALUES(2,’Jerry’,DEFAULT,NULL,NULL);<br>INSERT INTO emp (eid,ename) VALUES(3,’David’);</p><p> 课后练习:<br>    创建tedu库<br>创建图书分类表bookCat<br>        编号bid<br>        分类bname<br>        数量bCount<br>     创建图书表book<br>        编号bkid<br>        名称bkname<br>        隶属的分类 bid</p><pre><code>decimal(8,2)100800.55</code></pre><p>123456.789<em>10^-1<br>    12345.6789<br>    1234.56789</em>10^1<br>123.456789<em>10^2<br>12.3456789</em>10^3<br>1.23456789<em>10^4<br>                 1.234 </em> 10^100<br>     3.78786555<em>10^10<br>     0.00000555</em>10^10</p><p>varchar(6)    char(6)<br>tom    tom\n\n\n<br>david    david\n<br>一    一\n\n\n\n\n<br>一二    一二\n\n\n\n</p><p>练习1：<br>  创建一个jd库，在这个库中创建一个book表<br>  要求 有<br>图书编号 bid,<br>图书名称 bname,<br>上架时间 shelfTime，<br>价格 price，<br>描述 resume，<br>是否加价购 isJia,<br>库存量 stockCount<br>创建完成后，插入4条数据。<br>练习2:<br>  创建tedu库，在tedu中创建一个表 员工emp<br>  员工编号  eid<br>  员工姓名  ename<br>  员工性别  sex<br>  员工生日  birthday<br>  员工婚姻  wedding<br>  员工电话  phone<br>插入3条数据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;复习&lt;br&gt;数据保存方式：内存、文件、Excel(Access)、数据库。&lt;br&gt;关系型数据库-MySQL&lt;br&gt;数据库服务器 mysqld.exe&lt;br&gt;客户端 mysql.exe&lt;br&gt;登录方式： mysql.exe  –h127.0.0.1  -P3306  -uro
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://wjknihao.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL数据库</title>
    <link href="http://wjknihao.github.io/2018/06/01/%E7%AC%AC%E4%BA%94%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://wjknihao.github.io/2018/06/01/第五篇文章/</id>
    <published>2018-06-01T15:10:17.000Z</published>
    <updated>2018-06-01T15:14:00.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MYSQL数据库"><a href="#MYSQL数据库" class="headerlink" title="MYSQL数据库"></a>MYSQL数据库</h1><h2 id="1-项目中大量数据"><a href="#1-项目中大量数据" class="headerlink" title="1.项目中大量数据"></a>1.项目中大量数据</h2><p>内存：        存储的速度快，空间小；<br>自定义文件:   存储的空间大，不便于使用管理<br>Access/Exel:  灵活性不足，空间大，处理数据能力差<br>专用服务器:   托管到云服务企业中<br>数据库服务器: 安全程度高，管理相对复杂</p><p>database 数据库    quit  放弃  </p><h2 id="2-数据库分类："><a href="#2-数据库分类：" class="headerlink" title="2.数据库分类："></a>2.数据库分类：</h2><p>网状数据库<br>  层次型(树状)数据库<br>  关系型数据库(RDBMS)<br>Relational database manage system(了解)<br>MySQL  SQL server  oracle<br>  非关系型数据库(NoSQL)<br>     MongoDB</p><h2 id="3-MySQL数据库的使用"><a href="#3-MySQL数据库的使用" class="headerlink" title="3.MySQL数据库的使用"></a>3.MySQL数据库的使用</h2><p>  xampp 集成好的服务器(mysql, apache)<br>  (1)开启mysql服务器<br>     C:\xampp\mysql\bin\mysqld.exe<br>     httpd  sshd  ftpd -&gt; deamon (精灵，守护)<br>     都是服务器端的一种服务<br>  (2)mysql客户端<br>     C:\xampp\mysql\bin\mysql.exe<br>     注意：进入数据库使用的来宾账户，不能真正的操作数据库。<br>  (3)使用shell登录mysql<br>h – host    主机<br>P – port    端口<br>u -user     用户<br>p - password 密码<br>    mysql.exe  -h127.0.0.1  -P3306  -uroot  -p<br>简写形式： mysql  -uroot</p><p>  数据完整结构<br>Server -&gt; Database -&gt; Table -&gt;Row(行)-&gt;Column(列)</p><h2 id="4-数据库命令"><a href="#4-数据库命令" class="headerlink" title="4.数据库命令"></a>4.数据库命令</h2><p>  (1) 查看当前数据库服务器中所有的数据库<br>     show databases;<br>  (2) 使用数据库<br>     use 数据库名称;<br>  (3) 查看当前数据库中所有的数据表<br>     show tables;<br>  (4) 查看数据表中有多少列(表头)<br>     desc 表的名称;<br>———————–脚本中常用的————————<br>  (5) 删除数据库<br>     drop  database  if  exists  数据库名称;<br>(6) 创建数据库<br>     create database 数据库名称;<br>  (7) 创建数据表<br>     create table 表名称 (<br>  eid  int,<br>      name varchar(8),<br>      ….列名称<br>     );<br>  (8) 插入数据<br>     insert into 表名称 values(列数据1, 列数据2…);<br>  (9) 查询数据<br>     select * from 表名称;<br>练习：<br>     通过desc查看 phpmyadmin中的表<br>     pma__favorite、pma__recent、pma__users；</p><h2 id="5-mysql命令执行方式"><a href="#5-mysql命令执行方式" class="headerlink" title="5. mysql命令执行方式"></a>5. mysql命令执行方式</h2><p>  (1) 命令行 – 写一行，执行一行(通过shell)。<br>  (2) 脚本形式 – 把所有要执行的命令写入到一个文件中，然后执行整个文件。<br>① 创建 .sql文件；<br>② 打开shell终端<br>   mysql  -uroot  &lt;  拖拽sql文件到这位置<br>  注释：<br>单行注释  # 注释的内容<br>多行注释  /<em> 注释的内容 </em>/<br>  练习：<br>    创建一个2.sql文件，查看phpmyadmin数据中 pma__favorite表的结构；</p><p>   需求：保存员工的信息(编号eid、姓名name、性别sex、电话 phone)<br>①创建数据库<br>②创建数据表<br>③往数据表中插入数据<br>  –1</p><h2 id="6-Sql语句"><a href="#6-Sql语句" class="headerlink" title="6. Sql语句"></a>6. Sql语句</h2><p>  SQL(structured query language)，结构化查询语言，用于操作数据库的语言，绝大多数的关系型数据都支持。</p><p>  练习：往emp数据表中插入5条数据</p><p>  课后练习：<br>创建一个数据库名称xuezi<br>在数据库中创建数据表laptop,含有的列( 编号lid, 标题title, 图片image, 价格price, 库存量stockCount，是否主页推荐 isIndexRecommend )<br>    往数据表中插入5条数据<br>    查询出laptop表中所有的数据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MYSQL数据库&quot;&gt;&lt;a href=&quot;#MYSQL数据库&quot; class=&quot;headerlink&quot; title=&quot;MYSQL数据库&quot;&gt;&lt;/a&gt;MYSQL数据库&lt;/h1&gt;&lt;h2 id=&quot;1-项目中大量数据&quot;&gt;&lt;a href=&quot;#1-项目中大量数据&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="MYSQL" scheme="http://wjknihao.github.io/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>server笔记</title>
    <link href="http://wjknihao.github.io/2018/05/31/%E7%AC%AC%E5%9B%9B%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://wjknihao.github.io/2018/05/31/第四篇文章/</id>
    <published>2018-05-31T13:31:40.000Z</published>
    <updated>2018-05-31T14:01:52.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-web课程的介绍"><a href="#1-web课程的介绍" class="headerlink" title="1.web课程的介绍"></a>1.web课程的介绍</h1><p><a href="http://www.codeboy.com/" target="_blank" rel="noopener">学子商城</a></p><p>  1.项目的流程/数据库(mysql)/<br>    JavaScript基础/服务器Node.js<br>  2.HTML基础/HTTP&amp;AJAX/CSS基础/css高级/Bootstrap<br>  3.JS高级/BOM&amp;&amp;DOM/jQuery/Vue.js<br>  4.Vue.js生态圈/HTML5高级/微信的公众号(小程序)/混编<br>  5.Angular生态圈/React生态圈/pythonWeb-django/毕业项目</p><h1 id="2-学习之前的准备"><a href="#2-学习之前的准备" class="headerlink" title="2.学习之前的准备"></a>2.学习之前的准备</h1><pre><code>1.英文单词要求：200多个2.行业背景要求：0要求3.心态准备 4.键速要求：350次/分钟</code></pre><h1 id="3-windows系统常用快捷键"><a href="#3-windows系统常用快捷键" class="headerlink" title="3.windows系统常用快捷键"></a>3.windows系统常用快捷键</h1><p>  windows+d: 显示/隐藏桌面<br>  windows+e: 打开文件资源管理器<br>  windows+r: 打开运行窗口calc/mspaint/cmd<br>  alt+tab: 多个窗口间的切换（往右）<br>  alt+shift+tab:多个窗口的切换（往左）<br>  alt+f4:关闭当前窗口</p><h1 id="4-软件工程"><a href="#4-软件工程" class="headerlink" title="4.软件工程"></a>4.软件工程</h1><p>  IBM：DOS系统(磁盘管理系统)<br>  Bill Gates—&gt;  Microsoft<br>  —&gt;DOS—&gt;windows</p><p>  1.软件过程<br>  2.软件测试<br>  3.软件度量<br>  4.软件质量保证<br>  5.软件标准 国标 军标</p><h1 id="5-软件生命周期"><a href="#5-软件生命周期" class="headerlink" title="5.软件生命周期"></a>5.软件生命周期</h1><p>  1.软件定义期<br>    1)可行性研究阶段–《可行性研究报告》<br>        技术、设备、人力、时间、资金、回报率、政策法规<br>    2)需求分析阶段–《软件需求说明书/规约》<br>        功能性需求点：具体功能<br>        非功能性的需求点：安全需求，可靠性需求，处理精度…..<br>  2.软件的开发期<br>    3)概要设计阶段–《概要设计说明书》<br>      有哪些子系统，哪些模块，模块的功能<br>    4)详细设计阶段<br>      每个功能具体的实现细节（对象，函数，算法）<br>    5)编码实现阶段—《项目开发进度报告》<br>      UI设计师 出效果图<br>      前端工程师 把效果图变成浏览器能运行的代码<br>      后端工程师 为前台网页提供数据支持</p><pre><code>6)测试阶段--《测试报告》</code></pre><p>  3.软件的维护期</p><pre><code>7)项目的部署阶段 linux系统8)项目维护阶段</code></pre><p>  学子商城的系统<br>  前台子系统：商品模块，用户模块，购物车模块<br>  后台子系统：商品模块，用户模块，订单模块<br>  移动端子系统：商品模块，用户模块，购物车模块</p><h1 id="6-服务器"><a href="#6-服务器" class="headerlink" title="6.服务器"></a>6.服务器</h1><p>  域名/ip地址<br>  端口号  :<br>  协议  </p><p>  访问本地服务器<br>  在cmd中输入 ipconfig<br>  得到本机的ip地址<br>  在浏览器的地址栏输入</p><blockquote><p><a href="http://ip地址:80" target="_blank" rel="noopener">http://ip地址:80</a></p></blockquote><p>  127.0.0.1—-&gt;本机IP<br>  <a href="http://127.0.0.1:80" target="_blank" rel="noopener">http://127.0.0.1:80</a></p><p> <a href="http://localhost:80" target="_blank" rel="noopener">http://localhost:80</a></p><p>  访问同学的服务器<br>  1.同学必须把文件放入public文件夹<br>  2.启动服务器<br>  3.告诉ip地址<br>  <a href="http://172.163.2.109:80" target="_blank" rel="noopener">http://172.163.2.109:80</a></p><p>作业：<br>1、下载并安装Node.js解释器。nodejs.org<br>2、下载“达内WebServer”。<br>3、编写自己的网页保存到服务器public目录下。<br>4、启动Web服务器。<br>5、使用客户端浏览器访问Web服务器上的网页<br>6、访问同桌服务器中的文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-web课程的介绍&quot;&gt;&lt;a href=&quot;#1-web课程的介绍&quot; class=&quot;headerlink&quot; title=&quot;1.web课程的介绍&quot;&gt;&lt;/a&gt;1.web课程的介绍&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.codeboy.com/&quot; targ
      
    
    </summary>
    
    
      <category term="server" scheme="http://wjknihao.github.io/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>爆冷的冷知识共享,不谢拿走</title>
    <link href="http://wjknihao.github.io/2018/05/25/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://wjknihao.github.io/2018/05/25/第三篇文章/</id>
    <published>2018-05-25T14:08:48.000Z</published>
    <updated>2018-05-25T14:09:22.807Z</updated>
    
    <content type="html"><![CDATA[<p>1、“为什么公司这么爱开会？”<br>“因为没能力的人坐在会议上，就有在做事的错觉！”</p><p>2、放肆地吃只能给你带来短暂的快乐，而长时间的节食减肥可以给你带来长久的烦恼、焦躁和不爽。</p><p>3、没有善后的能力，就别有善变的脾气。</p><p>4、现在很多人的毛病：打起精神来3分钟就能干完的事儿，“打起精神”就要花上3个小时。</p><p>5、冷知识共享：自己用手打自己屁股，手更疼，屁股没啥感觉。</p><p>6、中国式育儿标准：小时侯胖，上学成绩好，长大赚钱多！</p><p>7、一个人如果能把借出去的钱都要回来，那就没什么事儿能难倒他了！</p><p>8、内涵段子倒下的时候，已经预示了下一个可能倒霉的企业：滴。。。滴滴。。。</p><p>9、记者：你的电影很暴力，不觉得会助长暴力吗？<br>导演：世界上有那么多很美好的让人感动的电影，也没觉得会助长世界变的很和平啊！</p><p>10、给新股民的六点建议：<br>1.你炒股票不要让家人知道<br>2.会炒股不等于不被套<br>3.亏损时记得低位补仓<br>4.得到内慕消息切记别声张<br>5.跳水之后即是大涨之时<br>6.楼市低迷股市一般冲高<br>以上六点是我个人建议，每一条第一个字连起来。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、“为什么公司这么爱开会？”&lt;br&gt;“因为没能力的人坐在会议上，就有在做事的错觉！”&lt;/p&gt;
&lt;p&gt;2、放肆地吃只能给你带来短暂的快乐，而长时间的节食减肥可以给你带来长久的烦恼、焦躁和不爽。&lt;/p&gt;
&lt;p&gt;3、没有善后的能力，就别有善变的脾气。&lt;/p&gt;
&lt;p&gt;4、现在很多
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>家庭幽默,给你点厉害尝尝</title>
    <link href="http://wjknihao.github.io/2018/05/25/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://wjknihao.github.io/2018/05/25/第二篇文章/</id>
    <published>2018-05-25T13:59:46.000Z</published>
    <updated>2018-05-25T14:07:21.815Z</updated>
    
    <content type="html"><![CDATA[<p>1、在街上见到同事和她五岁的女儿。那可爱的小女孩虽是第一次见，却死说话说要我带她去游乐场。<br>我逗她：“你就不怕我把你卖了？”<br>小女孩说：“我妈说过，她有一个特别丑的同事，最善良了，那一定你吧。”<br>我。。。</p><p>2、弟弟眼睛比较大，有次感冒去看医生，医生说：炎症太大，开点药吃吃就好了。<br>结果这货回去就给妈妈说：医生说眼睁太大才嗓子疼的。</p><p>3、老妈在整理旧衣服，准备送小区的回收点。我看见有几件纯白的棉背心，贱贱说：这留着吧？以后给我孩子做尿布，又吸水又透气的多好啊！<br>老妈顺手抄起一个塑料凳就砸了过来：提起来老娘就一肚子气，你孩子的妈在哪个犄角旮旯呢？啊？!</p><p>4、哥跟嫂子吵架，嫂子骂我哥蠢，被我老妈听到了，老妈说：儿媳妇，我跟你说。我想果然是我妈，肯定要帮我哥反驳他老婆。<br>老妈：我只说一句，他的蠢跟我们没有关系，不是遗传，是他后来自己越长越蠢。<br>我。。。</p><p>5、婚后，第一次和媳妇去丈母娘家吃饭，我喜欢吃辣而丈母娘和老丈人不吃辣，好在丈母娘说她给我准备了自制的辣椒酱。我还暗庆幸丈母娘对我还挺好。<br>拿出来我尝了下，果然超级辣，和媳妇说：不错，这辣椒酱真厉害。<br>媳妇：还不明白吗？咱妈这是要给你点厉害尝尝。。。<br>我。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、在街上见到同事和她五岁的女儿。那可爱的小女孩虽是第一次见，却死说话说要我带她去游乐场。&lt;br&gt;我逗她：“你就不怕我把你卖了？”&lt;br&gt;小女孩说：“我妈说过，她有一个特别丑的同事，最善良了，那一定你吧。”&lt;br&gt;我。。。&lt;/p&gt;
&lt;p&gt;2、弟弟眼睛比较大，有次感冒去看医生
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第一篇微博</title>
    <link href="http://wjknihao.github.io/2018/05/25/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%BE%AE%E5%8D%9A/"/>
    <id>http://wjknihao.github.io/2018/05/25/第一篇微博/</id>
    <published>2018-05-25T12:49:37.000Z</published>
    <updated>2018-05-25T12:57:24.483Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到我的hexo-github博客搭建教程。<br>环境配置<br>node环境<br>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。<br>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。<br>Node.js 的包管理器 npm，是全球最大的开源库生态系统。<br>浏览器打开node官网下载8.11.2版本的msi双击<br>环境测试<br>1.win+r 打开运行窗口，输入cmd回车<br>2.在cmd窗口输入<br>node -v<br>如果提示”node不是内部或外部命令”，需要重新安装node<br>如果提示v8.11.2则代表安装成功<br>git服务<br>浏览器打开git官网，下载最新版的git安装<br>安装完毕后，在桌面右键菜单出现git bash here则代表安装成功<br>安装hexo脚手架<br>1,win+r打开运行窗口，输入cmd回车<br>2，在命令行输入<br>npm install hexo-cil -g<br>通过npm包管理器全局安装hexo脚手架</p><p>#博客搭建<br>初始化博客项目<br>1，桌面右键git bash here<br>2， 在命令行窗口输入：<br>hexo init blog<br>通过hexo在桌面新建一个叫blog的博客项目<br>ps：blog是项目名称，名字随意，但不能是中午<br>3,切换到bolg路径<br>cd blog<br>4,安装项目依赖<br>npm install</p><p>5.启动服务器<br>hexo s</p><p>6.预览博客<br>浏览器地址栏输入localhost:4000或者127.0.0.1:4000回车<br>ps：建议使用Chrome（谷歌浏览器）</p><h2 id="hexo-常规操作"><a href="#hexo-常规操作" class="headerlink" title="hexo 常规操作"></a>hexo 常规操作</h2><ul><li>清理项目缓存<br>hexo clean</li></ul><p>何时使用？<br>修改了博客内容却没有效果或者修复了bug报错依然存在</p><ul><li>编译博客<br>hexo g<br>何时使用？<br>⑴每次hexo clean之后都需要重新编译<br>⑵部分情况下修改了_config.yml配置文件后需要重新编译<br>⑶手动新建博客文章之后需要重新编译</li><li>重启服务器<br>在之前启动服务的命令行窗口使用快捷键”ctrl+c”可以停止hexo服务<br>然后紧接着输入hexo s启动<br>何时使用？<br>修改了_config.yml需要重启服务<h1 id="heo项目托管到github"><a href="#heo项目托管到github" class="headerlink" title="heo项目托管到github"></a>heo项目托管到github</h1>1，打开<a href="">git</a>注册个人账户，并记录下用户了名和邮箱，并且验证邮箱<h2 id="本机验证github的key"><a href="#本机验证github的key" class="headerlink" title="本机验证github的key"></a>本机验证github的key</h2>2.桌面右键打开git bush here<br>ssh-keygen -t rsa -C “自己的邮箱”</li></ul><p>一路回车，直到出现下列图案<br>+—[RSA 2048]—-+<br>|..B = .          |<br>| <em> &amp; =           |<br>|+ @ O   . .      |<br>|.</em> * o   = .  .  |<br>|  o o . S   +  E.|<br>|     o + . + .. o|<br>|      + + . . …|<br>|     . + o .   .o|<br>|      . . +.    .|<br>+—-[SHA256]—–+</p><p>接下来依次代开：c:/users/Administrator/.ssh路径<br>找到：id_rsa.pub文件右键选择记事本打开，全选并且复制里面的内容（key）<br>3，回到github页面，找到头像右侧倒三角下拉菜单，选择settings<br>4，在页面左侧选择ssj and gpk<br>5，点击右上角绿色 add ssh 按钮<br>6，在表单输入title(随意)和key(粘贴之前复制到的key)<br>然后点击绿色create ssh 按钮<br>7，回到刚才创建的key的命令行窗口验证用户名和邮箱<br>git config –global user.name “用户名”<br>git config –global user.email “邮箱”<br>如果验证成功，没有任何意思</p><h2 id="创建github用户名同名仓库"><a href="#创建github用户名同名仓库" class="headerlink" title="创建github用户名同名仓库"></a>创建github用户名同名仓库</h2><p>在github页面点击头像右侧的+，选择 New repository<br>重点：仓库名必须是：用户名.github.io，PS:(严格区分大小写)如：wjknihao.github.io</p><h2 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h2><h3 id="找到项目主目录下的-config-yml文件"><a href="#找到项目主目录下的-config-yml文件" class="headerlink" title="找到项目主目录下的_config,yml文件"></a>找到项目主目录下的_config,yml文件</h3><p>在文档的最下方天剑如下内容<br>type: git<br>repository: <a href="https://github.com/用户名/用户名.github.io.git" target="_blank" rel="noopener">https://github.com/用户名/用户名.github.io.git</a><br>branch: master<br>PS：整个项目有两个_config.yml<br>根目录_config.yml负责整个项目的一些配置，如：博客名称、语言等<br>themes文件夹内的_config.yml负责主体样式方面的配置</p><h2 id="项目推送"><a href="#项目推送" class="headerlink" title="项目推送"></a>项目推送</h2><p>1.安装gcmw（解压压缩包，双击install.cmd)<br>2.打开博客项目根目录，右键git bush here<br>3,安装deployer-git依赖<br>npm install hexo-deployer-git –save<br>4，依次执行如下命令<br>hexo clean<br>hexo g<br>hexo d<br>5.中途会弹出github的验证，输入相应的应户名密码就好<br>如果推送成功，在浏览器打开http://用户名.github.io即可访问</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎来到我的hexo-github博客搭建教程。&lt;br&gt;环境配置&lt;br&gt;node环境&lt;br&gt;Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。&lt;br&gt;Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。&lt;br&gt;
      
    
    </summary>
    
    
      <category term="all" scheme="http://wjknihao.github.io/tags/all/"/>
    
      <category term="hexo" scheme="http://wjknihao.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
